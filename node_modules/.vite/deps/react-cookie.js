import {
  es6_default
} from "./chunk-O5QDZNHP.js";
import {
  require_hoist_non_react_statics_cjs
} from "./chunk-6O2JH67B.js";
import {
  require_react
} from "./chunk-RDZYK52F.js";
import "./chunk-AIWIYUBO.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/react-cookie/es6/Cookies.js
var Cookies_default = es6_default;

// node_modules/react-cookie/es6/CookiesProvider.js
var React2 = __toESM(require_react());

// node_modules/react-cookie/es6/CookiesContext.js
var React = __toESM(require_react());
var CookiesContext = React.createContext(new Cookies_default());
var { Provider, Consumer } = CookiesContext;
var CookiesContext_default = CookiesContext;

// node_modules/react-cookie/es6/CookiesProvider.js
var CookiesProvider = class extends React2.Component {
  constructor(props) {
    super(props);
    if (props.cookies) {
      this.cookies = props.cookies;
    } else {
      this.cookies = new es6_default(void 0, props.defaultSetOptions);
    }
  }
  render() {
    return React2.createElement(Provider, { value: this.cookies }, this.props.children);
  }
};

// node_modules/react-cookie/es6/withCookies.js
var React3 = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function withCookies(WrappedComponent) {
  const name = WrappedComponent.displayName || WrappedComponent.name;
  class CookieWrapper extends React3.Component {
    constructor() {
      super(...arguments);
      this.onChange = () => {
        this.forceUpdate();
      };
    }
    listen() {
      this.props.cookies.addChangeListener(this.onChange);
    }
    unlisten(cookies) {
      (cookies || this.props.cookies).removeChangeListener(this.onChange);
    }
    componentDidMount() {
      this.listen();
    }
    componentDidUpdate(prevProps) {
      if (prevProps.cookies !== this.props.cookies) {
        this.unlisten(prevProps.cookies);
        this.listen();
      }
    }
    componentWillUnmount() {
      this.unlisten();
    }
    render() {
      const _a = this.props, { forwardedRef, cookies } = _a, restProps = __rest(_a, ["forwardedRef", "cookies"]);
      const allCookies = cookies.getAll();
      return React3.createElement(WrappedComponent, Object.assign({}, restProps, { ref: forwardedRef, cookies, allCookies }));
    }
  }
  CookieWrapper.displayName = `withCookies(${name})`;
  CookieWrapper.WrappedComponent = WrappedComponent;
  const ForwardedComponent = React3.forwardRef((props, ref) => {
    return React3.createElement(Consumer, null, (cookies) => React3.createElement(CookieWrapper, Object.assign({ cookies }, props, { forwardedRef: ref })));
  });
  ForwardedComponent.displayName = CookieWrapper.displayName;
  ForwardedComponent.WrappedComponent = CookieWrapper.WrappedComponent;
  return (0, import_hoist_non_react_statics.default)(ForwardedComponent, WrappedComponent);
}

// node_modules/react-cookie/es6/useCookies.js
var import_react = __toESM(require_react());

// node_modules/react-cookie/es6/utils.js
function isInBrowser() {
  return typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
}

// node_modules/react-cookie/es6/useCookies.js
function useCookies(dependencies) {
  const cookies = (0, import_react.useContext)(CookiesContext_default);
  if (!cookies) {
    throw new Error("Missing <CookiesProvider>");
  }
  const [allCookies, setCookies] = (0, import_react.useState)(() => cookies.getAll());
  if (isInBrowser()) {
    (0, import_react.useLayoutEffect)(() => {
      function onChange() {
        const newCookies = cookies.getAll({
          doNotUpdate: true
        });
        if (shouldUpdate(dependencies || null, newCookies, allCookies)) {
          setCookies(newCookies);
        }
      }
      cookies.addChangeListener(onChange);
      return () => {
        cookies.removeChangeListener(onChange);
      };
    }, [cookies, allCookies]);
  }
  const setCookie = (0, import_react.useMemo)(() => cookies.set.bind(cookies), [cookies]);
  const removeCookie = (0, import_react.useMemo)(() => cookies.remove.bind(cookies), [cookies]);
  const updateCookies = (0, import_react.useMemo)(() => cookies.update.bind(cookies), [cookies]);
  return [allCookies, setCookie, removeCookie, updateCookies];
}
function shouldUpdate(dependencies, newCookies, oldCookies) {
  if (!dependencies) {
    return true;
  }
  for (let dependency of dependencies) {
    if (newCookies[dependency] !== oldCookies[dependency]) {
      return true;
    }
  }
  return false;
}
export {
  Cookies_default as Cookies,
  CookiesProvider,
  useCookies,
  withCookies
};
//# sourceMappingURL=react-cookie.js.map
